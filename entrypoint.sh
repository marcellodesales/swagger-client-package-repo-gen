#!/bin/bash

# Most variables are from https://github.com/swagger-api/swagger-codegen/blob/master/modules/swagger-codegen-maven-plugin/README.md

: ${SCHEMA_FILE_NAME?"Must set SCHEMA_FILE_NAME"}

if [ ! -f "/schemas/${SCHEMA_FILE_NAME}" ]; then
  echo "The schema filename ${SCHEMA_FILE_NAME} does NOT exist! Please mount /schemas with it!"
  exit 1
fi

: ${GENERATE_CLIENT_LANG?"Must GENERATE_CLIENT_LANG"}
: ${GENERATE_CLIENT_WITH_LIBRARY?"Must set GENERATE_CLIENT_WITH_LIBRARY"}
: ${GENERATE_CLIENT_WITH_BUILDER?"Must set GENERATE_CLIENT_WITH_BUILDER (maven, gradle in java lang)"}

: ${GENERATE_CLIENT_GROUPID?"Must set GENERATE_CLIENT_GROUPID"}
: ${GENERATE_CLIENT_ARTIFACT?"Must set GENERATE_CLIENT_ARTIFACT"}
: ${GENERATE_CLIENT_VERSION?"Must set GENERATE_CLIENT_VERSION"}

# Packages where the source-code will be created
: ${GENERATE_CLIENT_MODEL_PACKAGE?"Must set GENERATE_CLIENT_MODEL_PACKAGE"}
: ${GENERATE_CLIENT_API_PACKAGE?"Must set GENERATE_CLIENT_API_PACKAGE"}
: ${GENERATE_CLIENT_INVOKER_PACKAGE?"Must set GENERATE_CLIENT_INVOKER_PACKAGE"}

: ${GENERATE_CLIENT_URL?"Must set GENERATE_CLIENT_URL"}
: ${GENERATE_CLIENT_GIT_HOST?"Must set GENERATE_CLIENT_GIT_HOST"}

: ${GENERATE_CLIENT_GIT_USER?"Must set GENERATE_CLIENT_GIT_USER"}
: ${GENERATE_CLIENT_GIT_REPO?"Must set GENERATE_CLIENT_GIT_REPO"}

# For Developer Info and Initial Commit
: ${GENERATE_CLIENT_AUTHOR_FULLNAME?"Must set GENERATE_CLIENT_AUTHOR_FULLNAME"}
: ${GENERATE_CLIENT_AUTHOR_EMAIL?"Must set GENERATE_CLIENT_AUTHOR_EMAIL"}

# Normalize clients that doesn't have library
#if [ -z "${GENERATE_CLIENT_WITH_LIBRARY}" ]; then
#  export GENERATE_CLIENT_TYPE=${GENERATE_CLIENT_LANG}
#else
#  export GENERATE_CLIENT_TYPE=${GENERATE_CLIENT_WITH_LIBRARY}
#fi
#export GENERATE_CLIENT_GIT_REPO="${GENERATE_CLIENT_GIT_REPO}-${GENERATE_CLIENT_TYPE}"

export GENERATE_CLIENT_GIT_USER_REPO="${GENERATE_CLIENT_GIT_USER}/${GENERATE_CLIENT_GIT_REPO}"

# Where to send the files to
export GIT_REMOTE="git@${GENERATE_CLIENT_GIT_HOST}:${GENERATE_CLIENT_GIT_USER}/${GENERATE_CLIENT_GIT_REPO}.git"

echo ""
echo "üêô Setting up initial git repo at '${GIT_REMOTE}'"
echo ""
echo "- Setting user as ${GENERATE_CLIENT_AUTHOR_FULLNAME}"

git config --global user.name "${GENERATE_CLIENT_AUTHOR_FULLNAME}"
echo "- Setting email as ${GENERATE_CLIENT_AUTHOR_EMAIL}"

git config --global user.email "${GENERATE_CLIENT_AUTHOR_EMAIL}"

if [ -z ${GENERATE_CLIENT_GIT_BRANCH} ]; then
  export GENERATE_CLIENT_GIT_BRANCH=master
fi

export CLIENT_API_LOCATION=/generator/client-api

# TODO: Move this to the handler (gitlab, github, etc)
# Let's go first in the repository and verify if it exists
export GENERATE_CLIENT_GITLAB_PROJECT_ID=$(curl -s --header "PRIVATE-TOKEN: ${GENERATE_CLIENT_PUBLISH_TOKEN}" -X GET 'https://gitlab.com/api/v4/projects?owned=true' | jq --arg GROUP_REPO "${GENERATE_CLIENT_GIT_USER_REPO}" '.[] | select(.path_with_namespace == $GROUP_REPO).id')

if [ -z "${GENERATE_CLIENT_GITLAB_PROJECT_ID}" ]; then
  # Create a new repo because the repo does not exist
  mkdir -p ${CLIENT_API_LOCATION}

  git init ${CLIENT_API_LOCATION}

  # The git-remote.txt is generated by the update python
  git -C ${CLIENT_API_LOCATION} remote add origin ${GIT_REMOTE}

  # Create a new branch
  git -C ${CLIENT_API_LOCATION} checkout -b ${GENERATE_CLIENT_GIT_BRANCH}

  export CREATE_NEW_GIT_REPO=true
  # When the clone worked and the repo exists, not empty

  ###### INPUT REQUIRED
  # Personal Token
  export GITLAB_HOST=${GENERATE_CLIENT_GIT_HOST}
  export GITLAB_TOKEN=${GENERATE_CLIENT_PUBLISH_TOKEN:?"ERROR: Must provide the Gitlab token to create a new repo"}
  # Gitlab full group name, like suborg/org
  export GITLAB_GROUP=${GENERATE_CLIENT_GIT_USER}
  # The name of the new repo
  export GITLAB_NEW_REPO_NAME=${GENERATE_CLIENT_GIT_REPO}
  export GITLAB_NEW_REPO_DESCRIPTION="${GENERATE_CLIENT_LANG} ${GENERATE_CLIENT_WITH_LIBRARY} Client for ${GENERATE_CLIENT_GIT_REPO}"
 
  echo "- Initializing Git Repo at origin ${GIT_REMOTE} at branch ${GENERATE_CLIENT_GIT_BRANCH}"
  echo ""
  echo "üëΩ Creating a git repo at ${GITLAB_HOST}/${GENERATE_CLIENT_GIT_USER_REPO}"
  
  GENERATE_CLIENT_GITLAB_PROJECT_ID=$(. handler/gitlab/create-repo.sh)

else
  mkdir -p ${CLIENT_API_LOCATION}
  echo "- Pull existing Git Repo origin ${GIT_REMOTE} at branch ${GENERATE_CLIENT_GIT_BRANCH}..."
  git clone --progress --branch ${GENERATE_CLIENT_GIT_BRANCH} ${GIT_REMOTE} ${CLIENT_API_LOCATION} 2> git-clone.log

  if [ -f git-clone.log ]; then
    cat git-clone.log
  fi

  echo "- Checking out the requested branch ${GENERATE_CLIENT_GIT_BRANCH}"
  git -C ${CLIENT_API_LOCATION} checkout -b ${GENERATE_CLIENT_GIT_BRANCH} || git -C ${CLIENT_API_LOCATION} checkout ${GENERATE_CLIENT_GIT_BRANCH}

  git -C ${CLIENT_API_LOCATION} remote show origin
  git -C ${CLIENT_API_LOCATION} branch

  export CREATE_NEW_GIT_REPO=false
fi

echo ""
echo "üîé Found Gitlab ProjectID=${GENERATE_CLIENT_GITLAB_PROJECT_ID}"

# Generate the sources, containing springboot, sources, etc repo
echo ""
if [ ! -z "${GENERATE_CLIENT_WITH_LIBRARY}" ]; then
  echo "üëΩ Generate sources from ${SCHEMA_FILE_NAME} in ${GENERATE_CLIENT_LANG} using library ${GENERATE_CLIENT_WITH_LIBRARY}"
else
  echo "üëΩ Generate sources from ${SCHEMA_FILE_NAME} in ${GENERATE_CLIENT_LANG}"
fi
echo ""

# Generates the files under the dir client-api/
mvn generate-sources --offline


echo ""
echo "üë∑ Selected builder is '${GENERATE_CLIENT_WITH_BUILDER}'"
if [ "${GENERATE_CLIENT_WITH_BUILDER}" == "maven" ]; then
  echo "üî• Deleting other builder artifacts such as travis, gradle, sbt that will not be used..."
  # https://stackoverflow.com/questions/24058921/how-to-recursively-delete-multiple-files-with-different-extensions/24059207#24059207
  # https://unix.stackexchange.com/questions/249501/shell-find-delete-directory-not-empty/249503#249503
  find ${CLIENT_API_LOCATION} \( -name "*travis*" -o -name "*gradle*" -o -name "*git_push*" -o -name "*sbt*" \) -exec rm -rv {} +
fi


# Only generate if the repo was created to avoid errors
if [ "${GENERATE_CLIENT_LANG}" == "java" ]; then
  echo ""
  echo "üèó  Updating client metadata and files for CI/CD for ${GENERATE_CLIENT_LANG}"

  python handler/java/maven-updater.py
fi

echo ""
echo "üè∫ Packaging clients from stubs"
echo ""
if [ "$GENERATE_CLIENT_LANG" == "java" ]; then
  cd ${CLIENT_API_LOCATION}

  mvn package -Dmaven.test.skip=true

  # Fix the Android thing that's added
  # if [ -z "${GENERATE_CLIENT_FOR_ANDROID}" ]; then
  #   find src -name AndroidManifest.xml  | xargs rm -f
  # fi
  cd ..

elif [ "$GENERATE_CLIENT_LANG" == "dart" ]; then
  echo "Dart package is the git repo itself..."
fi

ANYTHING_TO_COMMIT=$(git -C ${CLIENT_API_LOCATION} status --short)
if [ -z "${ANYTHING_TO_COMMIT}" ]; then
  echo "* Nothing to update as there are no changes..."
  echo "Aborting..."
  exit 0
fi

echo ""
echo "üé® Copying originating schema '/schemas/${SCHEMA_FILE_NAME}'"
echo ""
if [ "$GENERATE_CLIENT_LANG" == "java" ]; then
  export SCHEMA_LOCATION="${CLIENT_API_LOCATION}/src/main/resources"
fi

if [ "$GENERATE_CLIENT_LANG" == "dart" ]; then
  export SCHEMA_LOCATION="${CLIENT_API_LOCATION}/assets"
fi

# Copying the schema to the location
# Copy the file to the resources named "swagger-api.[ext]"
mkdir -p ${SCHEMA_LOCATION}
export SCHEMA_EXT="${SCHEMA_FILE_NAME##*.}"
echo "Copying schemas to language location..."
cp -v "/schemas/${SCHEMA_FILE_NAME}" "${SCHEMA_LOCATION}/swagger-api.${SCHEMA_EXT}"

if [ "${CREATE_NEW_GIT_REPO}" == "true" ]; then
  echo "- Initial commit..."
  git -C ${CLIENT_API_LOCATION} add .

  # https://stackoverflow.com/questions/5064563/add-line-break-to-git-commit-m-from-the-command-line/5064653#5064653
  git -C ${CLIENT_API_LOCATION} commit --no-edit -F- <<EOF
:tada:  Initial commit for client API

* Generated on $(date -d now)"
* By ${GENERATE_CLIENT_AUTHOR_FULLNAME} <${GENERATE_CLIENT_AUTHOR_EMAIL}>
* From: src/main/resources/${SCHEMA_FILE_NAME}
EOF

else
  echo ""
  echo "- Seeing the differences"
  git -C ${CLIENT_API_LOCATION} --no-pager diff

  # Just add all the changes to be committed
  git -C ${CLIENT_API_LOCATION} add .

  echo ""
  echo "- Update commit..."
  # https://stackoverflow.com/questions/5064563/add-line-break-to-git-commit-m-from-the-command-line/5064653#5064653
  git -C ${CLIENT_API_LOCATION} commit --no-edit -F- <<EOF
:new:  Updating client API

* Generated on $(date -d now)"
* By ${GENERATE_CLIENT_AUTHOR_FULLNAME} <${GENERATE_CLIENT_AUTHOR_EMAIL}>
* From: src/main/resources/${SCHEMA_FILE_NAME}
EOF
fi

echo ""
if [ "${CREATE_NEW_GIT_REPO}" == "true" ] || [ ! -z "${GENERATE_CLIENT_GIT_PUSH}" ]; then
  # let's just push as we pushed the modules
  echo "üöö Pushing the code to the git host. Make sure to have the ssh keys mounted!"
  git -C ${CLIENT_API_LOCATION} push origin ${GENERATE_CLIENT_GIT_BRANCH}

else
  echo "üöö Skip pushing to the code to git. Set GENERATE_CLIENT_GIT_PUSH=true if needed!"
fi
echo ""

echo ""
if [ ! -z "${GENERATE_CLIENT_PUBLISH_TOKEN}" ]; then
  export GITLAB_TOKEN=${GENERATE_CLIENT_PUBLISH_TOKEN}
  echo "üì¶ Publishing stubs to Gitlab Maven Repository"
  echo ""
  # https://docs.gitlab.com/12.10/ee/user/packages/maven_repository/#uploading-packages
  cd ${CLIENT_API_LOCATION}
  mvn deploy -s personal_settings.xml -Dmaven.test.skip=true
  cd ..

else
  echo "üì¶ Skip publishing stubs to Maven repo. Set GENERATE_CLIENT_PUBLISH_TOKEN=token if needed!"
fi
echo ""

# Finally, copy the generated artifacts to the client
export CLIENT_DIR="$GENERATE_CLIENT_ARTIFACT-${GENERATE_CLIENT_WITH_LIBRARY}"
if [ -d "/client-api/${CLIENT_DIR}" ]; then
  echo ""
  echo "üí• Deleting previous build from directory '/client-api/${CLIENT_DIR}'"
  echo ""
  rm -rf /client-api/${CLIENT_DIR}
fi
cd ..
mv ${CLIENT_API_LOCATION} ${CLIENT_DIR}

echo ""
echo "üçª Local deploy to /client-api/${CLIENT_DIR}"
echo ""
cp -R -v ${CLIENT_DIR}/ /client-api

echo ""
echo "‚ú® Done!"
echo ""
