# Most variables are from https://github.com/swagger-api/swagger-codegen/blob/master/modules/swagger-codegen-maven-plugin/README.md

: ${SCHEMA_FILE_NAME?"Must set SCHEMA_FILE_NAME"}

if [ ! -f "/schemas/${SCHEMA_FILE_NAME}" ]; then
  echo "The schema filename ${SCHEMA_FILE_NAME} does NOT exist! Please mount /schemas with it!"
  exit 1
fi

: ${GENERATE_CLIENT_LANG?"Must GENERATE_CLIENT_LANG"}
: ${GENERATE_CLIENT_WITH_LIBRARY?"Must set GENERATE_CLIENT_WITH_LIBRARY"}

: ${GENERATE_CLIENT_GROUPID?"Must set GENERATE_CLIENT_GROUPID"}
: ${GENERATE_CLIENT_ARTIFACT?"Must set GENERATE_CLIENT_ARTIFACT"}
: ${GENERATE_CLIENT_VERSION?"Must set GENERATE_CLIENT_VERSION"}

# Packages where the source-code will be created
: ${GENERATE_CLIENT_MODEL_PACKAGE?"Must set GENERATE_CLIENT_MODEL_PACKAGE"}
: ${GENERATE_CLIENT_API_PACKAGE?"Must set GENERATE_CLIENT_API_PACKAGE"}
: ${GENERATE_CLIENT_INVOKER_PACKAGE?"Must set GENERATE_CLIENT_INVOKER_PACKAGE"}

: ${GENERATE_CLIENT_URL?"Must set GENERATE_CLIENT_URL"}
: ${GENERATE_CLIENT_GIT_HOST?"Must set GENERATE_CLIENT_GIT_HOST"}

# https://stackoverflow.com/questions/2829613/how-do-you-tell-if-a-string-contains-another-string-in-posix-sh/8811800#8811800
if test "${GENERATE_CLIENT_GIT_HOST#*gitlab}" != "gitlab"; then
  : ${GENERATE_CLIENT_GITLAB_PROJECT_ID?"Must set GENERATE_CLIENT_GITLAB_PROJECT_ID for gitlab hosts. It's in the root of the repo project!"}
fi

: ${GENERATE_CLIENT_GIT_USER_REPO?"Must set GENERATE_CLIENT_GIT_USER_REPO"}

# For Developer Info and Initial Commit
: ${GENERATE_CLIENT_AUTHOR_FULLNAME?"Must set GENERATE_CLIENT_AUTHOR_FULLNAME"}
: ${GENERATE_CLIENT_AUTHOR_EMAIL?"Must set GENERATE_CLIENT_AUTHOR_EMAIL"}

# Generate the sources, containing springboot, sources, etc repo
echo "üëΩ Generate the sources from ${SCHEMA_FILE_NAME} in ${GENERATE_CLIENT_LANG} using library ${GENERATE_CLIENT_WITH_LIBRARY}"
echo ""
mvn generate-sources --offline

echo ""
echo "üèó  Updating client metadata and files for CI/CD for ${GENERATE_CLIENT_LANG}"
python update-generated-project.py

echo ""
echo "üè∫ Generating client jars from stubs"
cd springboot-client-api/
mvn package -Dmaven.test.skip=true

# Fix the Android thing that's added
# if [ -z "${GENERATE_CLIENT_FOR_ANDROID}" ]; then
#   find src -name AndroidManifest.xml  | xargs rm -f
# fi

echo ""
echo "üé® Copying originating schema '/schemas/${SCHEMA_FILE_NAME}'"
mkdir -p src/main/resources
cp -v "/schemas/${SCHEMA_FILE_NAME}" src/main/resources

export GIT_REMOTE=$(cat ../git-remote.txt)
echo ""
echo "üêô Setting up initial git repo with remote '${GIT_REMOTE}'"
echo "- Setting user as ${GENERATE_CLIENT_AUTHOR_FULLNAME}"

git config --global user.name "${GENERATE_CLIENT_AUTHOR_FULLNAME}"
echo "- Setting email as ${GENERATE_CLIENT_AUTHOR_EMAIL}"

git config --global user.email "${GENERATE_CLIENT_AUTHOR_EMAIL}"
echo "- Adding remote as ${GIT_REMOTE}"
echo ""
git init .
# The git-remote.txt is generated by the update python
git remote add origin ${GIT_REMOTE}
echo "- Initial commit..."
git add .

# https://stackoverflow.com/questions/5064563/add-line-break-to-git-commit-m-from-the-command-line/5064653#5064653
git commit --no-edit -F- <<EOF
:tada:  Initial commit for client API

* Generated on $(date -d now)"
* By ${GENERATE_CLIENT_AUTHOR_FULLNAME} <${GENERATE_CLIENT_AUTHOR_EMAIL}>
* From: src/main/resources/${SCHEMA_FILE_NAME}
EOF

# Start the development branch as well
git checkout -b develop

if [ ! -z "${GENERATE_CLIENT_PUBLISH_TOKEN}" ]; then
  export GITLAB_TOKEN=${GENERATE_CLIENT_PUBLISH_TOKEN}
  echo ""
  echo "üì¶ Publishing stubs to Gitlab Maven Repository"
  # https://docs.gitlab.com/12.10/ee/user/packages/maven_repository/#uploading-packages
  mvn deploy -s personal_settings.xml -Dmaven.test.skip=true

  # let's just push as we pushed the modules
  echo ""
  echo "üöö Pushing the code to the git host. Make sure to have the ssh keys mounted!"
  git push origin master develop
fi

# Finally, copy the generated artifacts to the client
echo ""
export CLIENT_DIR="$GENERATE_CLIENT_ARTIFACT-${GENERATE_CLIENT_WITH_LIBRARY}"
if [ -d "/client-api/${CLIENT_DIR}" ]; then
  echo ""
  echo "üí• Deleting previous build from directory '/client-api/${CLIENT_DIR}'"
  echo ""
  rm -rf /client-api/${CLIENT_DIR}
fi
cd ..
mv springboot-client-api/ ${CLIENT_DIR}

echo "üçª Local deploy to /client-api/${CLIENT_DIR}"
cp -R -v ${CLIENT_DIR}/ /client-api

echo ""
echo "‚ú® Done!"
